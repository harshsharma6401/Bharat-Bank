// This will directly transfer to login if not logged in
 app.get('/transfer-money', (req, res) => {
  res.render('transfer-money',{title:'Transfer'});
 });


app.get('/add-user', (req, res) => {

  res.render('add-user',{title:'Add user'});

});

app.get('/view-users', (req, res) => {
    res.redirect('all-users');
});

app.get('/all-users', (req, res) => {
    User.find()
      .then(result => {
        res.render('view-users', { users: result, title: 'Users' });
      })
      .catch(err => {
        console.log(err);
      });
  });

  app.get('/transac-history', (req, res) => {
    //  console.log(req.body);
  User.find()
  .then((result)=>{
    res.render('transac-history', { users: result, title: 'Transactions' });     
  })
  .catch((err)=>{
      res.render('404', { title: 'User Not Found', message :"Something went wrong"});
     // console.log(err);
  })
});

app.get('/transaction-history', (req, res) => {
  Transaction.find()
    .then(result => {
      res.render(__dirname + '/views/transaction-history', { transactions: result, title: 'Transactions' });
    })
    .catch(err => {
      console.log(err);
    });
});

app.get('/login',(req,res)=>{
  // res.send('Hello !');
   res.render('login',{title :"Login"});
});




app.post('/view-users',async (req,res)=>{
  
  let last_user;

  last_user = await User.findOne().sort({ field: 'asc', _id: -1 }).limit(1);
  console.log(last_user);
  
  req.body.accountNumber = last_user.accountNumber + 1;
  const user = new User(req.body);

  user.save()
  .then((result)=>{
    res.redirect('/all-users');     
  })
  .catch((err)=>{

     console.log(err);
      if(err.code == '11000')
      {
      console.log("Cannot add duplicate user");
      res.render('404',{title :'404', message :"Cannot add duplicate user"});
      }
    
  })
  
  });



  app.post('/transfer',checkAuthenticated2,async (req,res)=>{

    const { sender, reciever, amount } = req.body;
    
    console.log(req.body);
    const sendid = sender;

    let senderUser, transferUser;
    try {
      senderUser = await User.findOne({ accountNumber: sender });
      transferUser = await User.findOne({ accountNumber: reciever });

    }
    catch (err) {
      res.render("payment-failure", { title: "Something went wrong" , message : "Something went wrong" });
    }

    if (!senderUser || !transferUser) {
      res.render("payment-failure", { title: "No User", message : "User not Found. Please check and try again!"  });
    }


    else if ( senderUser.balance < amount  ||  amount < 0 ) {
      res.render("payment-failure", { title: "Not Enough", message : "Amount entered is more than balance."  });
    }

    else if(req.user.email != senderUser.email){

    console.log("Invalid ",senderUser.email,req.user.email);
    res.render("payment-failure", { title: "Not logged in" , message : "Please login with your registered email address."});

    }
    else
    { 
    console.log('Success');

    senderUser.balance = senderUser.balance - Number(amount);
    transferUser.balance = transferUser.balance + Number(amount);
    let savedsenderUser, savedtransferUser;
    try {
      savedsenderUser = await senderUser.save();
      savedtransferUser = await transferUser.save();
    }
    catch (err) {
      res.render("payment-failure", { title: "Smthng2", message : "Something went wrong. Please try again !" });
    }

    let currency = 'â‚¹';

    const Amount = amount;
    const transaction_id = uuidv4();

    const transaction = new Transaction({
     transactionID : transaction_id,
     accountNumber1: savedsenderUser.accountNumber,
     name1: savedsenderUser.name,
     accountNumber2: savedtransferUser.accountNumber,
     name2: savedtransferUser.name,
     amount: Amount
     });  
     

     await transaction.save()
    .then((result)=>{
    res.render("payment-success", { title: "Transaction successful" ,message: `Your balance is ${currency} ${savedsenderUser.balance}.`});
    })
    .catch((err)=>{
     console.log(err);
     res.render("payment-failure", { title: "Something went wrong" , message : "Transaction cannot be saved in the database" });
    })
  }
    });


app.post('/login',(req,res)=>{
  let token = req.body.token;
  //console.log(token);

  async function verify() {
      const ticket = await client.verifyIdToken({
          idToken: token,
          audience: CLIENT_ID,  
      });
      const payload = ticket.getPayload();
      const userid = payload['sub'];
      // If request specified a G Suite domain:
      // const domain = payload['hd'];

      console.log(payload);

    }
    verify()
    .then(()=>{
      res.cookie('session-token',token);
      //res.render(__dirname + '/views/add-user',{title:'Add user'});
      res.send('success');
    })
    .catch(console.error);

});

function checkAuthenticated2(req, res, next){

  let token = req.cookies['session-token'];

  let user = {};
  async function verify() {
      const ticket = await client.verifyIdToken({
          idToken: token,
          audience: CLIENT_ID,  // Specify the CLIENT_ID of the app that accesses the backend
      });
      const payload = ticket.getPayload();
      user.name = payload.name;
      user.email = payload.email;
      user.picture = payload.picture;
      let username = user.email;
      await User.findOne({email : username},(error,result)=>{
        
        if(error || result ==null)
        {
          res.render('404', { title: 'User Not Found' ,message : 'This user is not added in the database.'});
        }
        else
        { 
          console.log(result);
          user.accountNumber  = result.accountNumber;
          user.balance = result.balance;
        }
        });
        
    }
    verify()
    .then(()=>{
        req.user = user;
        next();
    })
    .catch(err=>{
        res.redirect('/login');
    })

}
function checkAuthenticated(req, res, next){

  let token = req.cookies['session-token'];

  let user = {};
  async function verify() {
      const ticket = await client.verifyIdToken({
          idToken: token,
          audience: CLIENT_ID,  // Specify the CLIENT_ID of the app that accesses the backend
      });
      const payload = ticket.getPayload();
      user.name = payload.name;
      user.email = payload.email;
      user.picture = payload.picture;
    }
    verify()
    .then(()=>{
        req.user = user;
        next();
    })
    .catch(err=>{
        res.redirect('/login')
    })

}

app.post('/login',(req,res)=>{
    let token = req.body.token;
    //console.log(token);
  
    async function verify() {
        const ticket = await client.verifyIdToken({
            idToken: token,
            audience: CLIENT_ID,  
        });
        const payload = ticket.getPayload();
        const userid = payload['sub'];
        // If request specified a G Suite domain:
        // const domain = payload['hd'];
  
        console.log(payload);
  
      }
      verify()
      .then(()=>{
        res.cookie('session-token',token,{SameSite : 'None' , Secure :true});
        //res.render(__dirname + '/views/add-user',{title:'Add user'});
        res.send('success');
      })
      .catch(console.error);
  
  });

  app.get('/dashboard',checkAuthenticated3,async(req,res)=>{  
  
  if(res.locals.user)
  {
  console.log('Res.locals.user : ',res.locals.user);
  req.user = res.locals.user;
  }
  res.render('dashboard',{ title :"Dashboard",myuser :req.user});
});

app.get('/logout',checkAuthenticated,(req,res)=>{

  let myuser = req.user;
  console.log(myuser);
  async function asyncCall() {
      async function deleteCookie()
      { 
       // While deploying set domain to be heroku
      // let dom = window.location.hostname;
       //console.log(dom);
       //res.cookie('JWT','',{maxAge : 1});
         res.cookie('session-token','',{maxAge : 1, SameSite : 'None' , Secure :true});
       // res.clearCookie('session-token',{path:'/',domain:'localhost'});
        //res.clearCookie('session-token',{path:'/',domain:`${dom}`});
       // res.clearCookie('session-token');
        res.set('Cache-Control', 'no-cache, private, no-store, must-revalidate, max-stale=0, post-check=0, pre-check=0');
      }
      await deleteCookie();

    }
    asyncCall();
    
    res.redirect('/');
});

app.post('/modify', async (req, res) => {
  console.log(req.body);

  const plainTextPassword = req.body.password;
  const username = req.body.username;

  const salt = await bcrypt.genSalt();
  const set_password  = await bcrypt.hash(plainTextPassword,salt);
  //const set_password = await bcrypt.hash(plainTextPassword,10);

  console.log(set_password);

      const response = await User.updateOne (
          {
             email :  username
          },
          {
              $set: {
                 password: set_password
              }
          }
      )
  
      console.log(response);
  
      res.json({ status: 'ok' })
  });


  app.get('/checksignin',(req,res)=>{

  //let my user =  req.user;
  let token = req.cookies['session-token'];
  if(!token)
  {
    console.log("No token ");
    res.send('No token');
  }
  else
  {
  //console.log(token);
  
  let user = {};
  async function verify() {
      const ticket = await client.verifyIdToken({
          idToken: token,
          audience: CLIENT_ID,  // Specify the CLIENT_ID of the app that accesses the backend
      });
      const payload = ticket.getPayload();
      user.name = payload.name;
      user.email = payload.email;
      user.picture = payload.picture;
    }
    verify()
    .then(()=>{
        req.user = user;
        console.log(req.user);
        res.send(user.email);
    })
    .catch(err=>{
      res.send('No token');
    })
  }
});